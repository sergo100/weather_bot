# WeatherBot
# –ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ
# –ì–æ–¥: 2025
# Telegram: @space_ranger3209
# –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã

import json
import requests
import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# üîê –¢–æ–∫–µ–Ω—ã
import os
from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHERAPI_TOKEN = os.getenv("WEATHERAPI_TOKEN") 
USER_DATA_FILE = 'user_data.json'

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

user_data = load_user_data()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∫–æ–Ω–æ–∫ WeatherAPI.com —Å —ç–º–æ–¥–∑–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –ø–æ–≥–æ–¥—ã (code) –∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–ª–∞–≥ –¥–Ω—è/–Ω–æ—á–∏ (is_day) –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
weather_emojis = {
    1000: {"day": "‚òÄÔ∏è", "night": "üåô"},
    1003: {"day": "üå§Ô∏è", "night": "‚òÅÔ∏è"},
    1006: {"day": "‚òÅÔ∏è", "night": "‚òÅÔ∏è"},
    1009: {"day": "‚òÅÔ∏è", "night": "‚òÅÔ∏è"},
    1030: "üå´Ô∏è",
    1063: "üåßÔ∏è",
    1066: "‚ùÑÔ∏è",
    1069: "üåßÔ∏è",
    1072: "üåßÔ∏è",
    1087: "‚õàÔ∏è",
    1114: "üå®Ô∏è",
    1117: "üå®Ô∏è",
    1135: "üå´Ô∏è",
    1147: "üå´Ô∏è",
    1150: "üåßÔ∏è",
    1153: "üåßÔ∏è",
    1168: "üåßÔ∏è",
    1171: "üåßÔ∏è",
    1180: "üåßÔ∏è",
    1183: "üåßÔ∏è",
    1186: "üåßÔ∏è",
    1189: "üåßÔ∏è",
    1192: "üåßÔ∏è",
    1195: "üåßÔ∏è",
    1198: "üåßÔ∏è",
    1201: "üåßÔ∏è",
    1204: "üåßÔ∏è",
    1207: "üåßÔ∏è",
    1210: "üå®Ô∏è",
    1213: "üå®Ô∏è",
    1216: "‚ùÑÔ∏è",
    1219: "‚ùÑÔ∏è",
    1222: "‚ùÑÔ∏è",
    1225: "‚ùÑÔ∏è",
    1237: "üå®Ô∏è",
    1240: "üåßÔ∏è",
    1243: "üåßÔ∏è",
    1246: "üåßÔ∏è",
    1249: "üåßÔ∏è",
    1252: "üåßÔ∏è",
    1255: "‚ùÑÔ∏è",
    1258: "‚ùÑÔ∏è",
    1261: "üåßÔ∏è",
    1264: "üåßÔ∏è",
    1273: "‚õàÔ∏è",
    1276: "‚õàÔ∏è",
    1279: "üå®Ô∏è",
    1282: "üå®Ô∏è"
}

def get_weather_emoji(icon_code, is_day=1):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ WeatherAPI.com.
    –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥ –¥–Ω—è/–Ω–æ—á–∏.
    """
    emoji_map = weather_emojis.get(icon_code)
    if isinstance(emoji_map, dict):
        return emoji_map.get("day" if is_day else "night", '‚ùî')
    return emoji_map if emoji_map else '‚ùî'


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        ["üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π"],
        ["‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ", "üí∏ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É"]
    ],
    resize_keyboard=True
)

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu
    )

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞."""
    user_id = str(update.message.from_user.id)
    city = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if city == "üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        return
    elif city == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π":
        await forecast(update, context)
        return
    elif city == "‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ":
        await about(update, context)
        return
    elif city == "üí∏ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É":
        await donate(update, context)
        return

    # WeatherAPI –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞, –±–µ–∑ LocationKey
    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ API-–∑–∞–ø—Ä–æ—Å–∞—Ö
    user_data[user_id] = {"city_name": city}
    save_user_data(user_data)
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
QR_PATH = os.path.join(BASE_DIR, 'assets', 'donate_qr.png')

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø—Ä–æ–µ–∫—Ç—É.
    
    –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    1. –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É `assets` –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ, —á—Ç–æ –∏ `weather_bot.py`.
    2. –ü–æ–º–µ—Å—Ç–∏—Ç—å –≤–∞—à QR-–∫–æ–¥ –≤ —ç—Ç—É –ø–∞–ø–∫—É –∏ –Ω–∞–∑–≤–∞—Ç—å —Ñ–∞–π–ª `donate_qr.png`.
    """
    try:
        # ------------ –í–ê–†–ò–ê–ù–¢ 1: –û–¢–ü–†–ê–í–ö–ê QR-–ö–û–î–ê (—Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω) ------------
        # –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞–ø–∫–∞ 'assets'
        # —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º QR-–∫–æ–¥–∞ 'donate_qr.png'
        if not os.path.exists(QR_PATH):
            await update.message.reply_text("QR-–∫–æ–¥ –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞.")
            return
        with open(QR_PATH, 'rb') as qr:
            await update.message.reply_photo(
                photo=qr,
                caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üíô\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –°–ë–ü –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üôè"
            )
        
        # ------------ –í–ê–†–ò–ê–ù–¢ 2: –û–¢–ü–†–ê–í–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω) ------------
        # –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ.
        # await update.message.reply_text(
        #      "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üíô\n"
        #      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º (@space_ranger3209) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ üôè"
        # )
    except Exception as e:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ üò¢")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ donate QR: {type(e).__name__}: {e}")

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π."""
    user_id = str(update.message.from_user.id)
    user_info = user_data.get(user_id)
    if not user_info or not user_info.get("city_name"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏ üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
        return

    city_name = user_info.get("city_name")
    text = get_forecast(city_name)
    await update.message.reply_text(text)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–± –∞–≤—Ç–æ—Ä–µ'."""
    await update.message.reply_text(
        "ü§ñ""–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n"
            "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–∏—à–∏—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n"
            "–ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ\n"
            "Telegram: @space_ranger3209\n" 
            "Github: https://github.com/sergo100\n"
            "¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã" 
        
        "\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –Ω–∞–∂–º–∏ üí∏ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É"   
        
    )

# ------------------ –ü–û–ì–û–î–ê ------------------

def get_weather(city_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å WeatherAPI.com."""
    try:
        url = f"http://api.weatherapi.com/v1/current.json?key={WEATHERAPI_TOKEN}&q={city_name}&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∞–º –æ—Ç–≤–µ—Ç
        print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {data}")

        if response.status_code == 200:
            temperature = data['current']['temp_c']
            description = data['current']['condition']['text']
            icon_code = data['current']['condition']['code']
            is_day = data['current']['is_day']
            emoji = get_weather_emoji(icon_code, is_day)

            return f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}: {emoji} {description}, {temperature}¬∞C"
        elif response.status_code == 400 and 'error' in data:
            return f"–û—à–∏–±–∫–∞: {data['error']['message']}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã WeatherAPI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

def get_forecast(city_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å WeatherAPI.com."""
    try:
        url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHERAPI_TOKEN}&q={city_name}&days=5&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∞–º –æ—Ç–≤–µ—Ç
        print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {data}")

        if response.status_code == 200:
            result = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city_name} (5 –¥–Ω–µ–π):\n"
            forecast_items = data['forecast']['forecastday']

            for item in forecast_items:
                date = datetime.datetime.strptime(item['date'], '%Y-%m-%d').date()
                temperature_max = item['day']['maxtemp_c']
                temperature_min = item['day']['mintemp_c']
                description = item['day']['condition']['text']
                icon_code = item['day']['condition']['code']
                emoji = get_weather_emoji(icon_code)

                result += f"{date}: {emoji} {description}, –æ—Ç {temperature_min}¬∞C –¥–æ {temperature_max}¬∞C\n"
            
            return result
        elif response.status_code == 400 and 'error' in data:
            return f"–û—à–∏–±–∫–∞: {data['error']['message']}. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
        else:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ WeatherAPI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

# ------------------ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –†–ê–°–°–´–õ–ö–ò ------------------

async def send_daily_weather(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã."""
    for user_id, user_info in user_data.items():
        city_name = user_info.get("city_name")
        if city_name:
            text = get_weather(city_name)
            text += "\n\n¬© 2025 –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ"
            try:
                await context.bot.send_message(chat_id=int(user_id), text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_update_notification(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    for user_id in user_data:
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="üîÑ –ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π API –ø–æ–≥–æ–¥—ã.\n–ù–∞–∂–º–∏—Ç–µ /start, –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ------------------ –ó–ê–ü–£–°–ö ------------------

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ApplicationBuilder
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.job_queue.run_once(send_update_notification, 0)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –≤ 8:00
    app.job_queue.run_daily(send_daily_weather, time=datetime.time(hour=8, minute=0))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()
