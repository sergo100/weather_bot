# WeatherBot
# –ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ
# –ì–æ–¥: 2025
# Telegram: @space_ranger3209
# Github: https://github.com/sergo100
# –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã

import json
import requests
import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# üîê –¢–æ–∫–µ–Ω—ã
import os
from dotenv import load_dotenv
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ACCUWEATHER_TOKEN = os.getenv("ACCUWEATHER_TOKEN") # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–æ–∫–µ–Ω–∞ AccuWeather
USER_DATA_FILE = 'user_data.json'

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(data, f)

user_data = load_user_data()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏–∫–æ–Ω–æ–∫ AccuWeather —Å —ç–º–æ–¥–∑–∏
weather_emojis = {
    1: "‚òÄÔ∏è", 2: "‚òÄÔ∏è", 3: "üå§Ô∏è", 4: "üå§Ô∏è", 5: "üå§Ô∏è",
    6: "üå•Ô∏è", 7: "‚òÅÔ∏è", 8: "‚òÅÔ∏è", 11: "üå´Ô∏è",
    12: "üåßÔ∏è", 13: "üåßÔ∏è", 14: "üåßÔ∏è", 15: "‚õàÔ∏è",
    16: "‚õàÔ∏è", 17: "‚õàÔ∏è", 18: "üåßÔ∏è", 19: "üå®Ô∏è",
    20: "üå®Ô∏è", 21: "üå®Ô∏è", 22: "‚ùÑÔ∏è", 23: "‚ùÑÔ∏è",
    24: "ÔøΩ", 25: "üåßÔ∏è", 26: "üåßÔ∏è", 29: "üåßÔ∏è",
    30: "ü•µ", 31: "ü•∂", 32: "üí®", 33: "üåô",
    34: "üåô", 35: "‚òÅÔ∏è", 36: "‚òÅÔ∏è", 37: "‚òÅÔ∏è",
    38: "‚òÅÔ∏è", 39: "üåßÔ∏è", 40: "üåßÔ∏è", 41: "‚õàÔ∏è",
    42: "‚õàÔ∏è", 43: "‚ùÑÔ∏è", 44: "‚ùÑÔ∏è"
}

def get_weather_emoji(icon_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É –∏–∫–æ–Ω–∫–∏ AccuWeather."""
    return weather_emojis.get(icon_id, '‚ùî')

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        ["üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π"],
        ["‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ", "üí∏ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É"]
    ],
    resize_keyboard=True
)

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu
    )

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞."""
    user_id = str(update.message.from_user.id)
    city = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if city == "üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        return
    elif city == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π":
        await forecast(update, context)
        return
    elif city == "‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ":
        await about(update, context)
        return
    elif city == "üí∏ –ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É":
        await donate(update, context)
        return

    location_key = validate_city(city)
    if location_key:
        user_data[user_id] = {"city_name": city, "location_key": location_key}
        save_user_data(user_data)
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
QR_PATH = os.path.join(BASE_DIR, 'assets', 'donate_qr.png')

async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –ø—Ä–æ–µ–∫—Ç—É."""
    try:
        if not os.path.exists(QR_PATH):
            await update.message.reply_text("QR-–∫–æ–¥ –¥–ª—è –¥–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞.")
            return

        with open(QR_PATH, 'rb') as qr:
            await update.message.reply_photo(
                photo=qr,
                caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üíô\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –°–ë–ü –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üôè"
            )
    except Exception as e:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ üò¢")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ donate QR: {type(e).__name__}: {e}")

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π."""
    user_id = str(update.message.from_user.id)
    user_info = user_data.get(user_id)
    if not user_info:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥. –ù–∞–∂–º–∏ üìç –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
        return

    city_name = user_info.get("city_name")
    location_key = user_info.get("location_key")
    text = get_forecast(city_name, location_key)
    await update.message.reply_text(text)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–± –∞–≤—Ç–æ—Ä–µ'."""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n"
        "–ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ\n"
        "Telegram: @space_ranger3209\n"
        "Github: https://github.com/sergo100\n"
        "¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã"
    )

# ------------------ –ü–û–ì–û–î–ê ------------------

def validate_city(city):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ API AccuWeather.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç LocationKey, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
    """
    try:
        url = f"http://dataservice.accuweather.com/locations/v1/cities/search?apikey={ACCUWEATHER_TOKEN}&q={city}&language=ru"
        print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}") # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        response = requests.get(url)
        data = response.json()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∞–º –æ—Ç–≤–µ—Ç
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {data}")
        
        if response.status_code == 200 and data:
            return data[0]['Key']
        elif response.status_code == 503:
            print("–û—à–∏–±–∫–∞ API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")
            return "API_LIMIT_EXCEEDED"
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞ AccuWeather: {e}")
        return None

def get_weather(city_name, location_key):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å AccuWeather."""
    if location_key == "API_LIMIT_EXCEEDED":
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    try:
        url = f"http://dataservice.accuweather.com/currentconditions/v1/{location_key}?apikey={ACCUWEATHER_TOKEN}&language=ru&details=false"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200 and data:
            temperature = data[0]['Temperature']['Metric']['Value']
            description = data[0]['WeatherText']
            icon_id = data[0]['WeatherIcon']
            emoji = get_weather_emoji(icon_id)
            return f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}: {emoji} {description}, {temperature}¬∞C"
        elif response.status_code == 503:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã AccuWeather: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

def get_forecast(city_name, location_key):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å AccuWeather."""
    if location_key == "API_LIMIT_EXCEEDED":
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    try:
        url = f"http://dataservice.accuweather.com/forecasts/v1/daily/5day/{location_key}?apikey={ACCUWEATHER_TOKEN}&language=ru&details=false&metric=true"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200 and data and data.get('DailyForecasts'):
            result = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city_name} (5 –¥–Ω–µ–π):\n"
            forecast_items = data['DailyForecasts'] # –ë–µ—Ä–µ–º –≤—Å–µ 5 –¥–Ω–µ–π

            for item in forecast_items:
                date = datetime.datetime.strptime(item['Date'], '%Y-%m-%dT%H:%M:%S%z').date()
                temperature_max = item['Temperature']['Maximum']['Value']
                temperature_min = item['Temperature']['Minimum']['Value']
                description = item['Day']['IconPhrase']
                icon_id = item['Day']['Icon']
                emoji = get_weather_emoji(icon_id)

                result += f"{date}: {emoji} {description}, –æ—Ç {temperature_min}¬∞C –¥–æ {temperature_max}¬∞C\n"
            
            return result
        elif response.status_code == 503:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ AccuWeather: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

# ------------------ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ò –†–ê–°–°–´–õ–ö–ò ------------------

async def send_daily_weather(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã."""
    for user_id, user_info in user_data.items():
        city_name = user_info.get("city_name")
        location_key = user_info.get("location_key")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        if location_key == "API_LIMIT_EXCEEDED":
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        else:
            text = get_weather(city_name, location_key)
        
        text += "\n\n¬© 2025 –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ"
        try:
            await context.bot.send_message(chat_id=int(user_id), text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_update_notification(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    for user_id in user_data:
        try:
            await context.bot.send_message(
                chat_id=int(user_id),
                text="üîÑ –ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π —Å –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞–º–∏.\n–ù–∞–∂–º–∏—Ç–µ /start, –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ------------------ –ó–ê–ü–£–°–ö ------------------

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ApplicationBuilder
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_city))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # `run_once` —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 0 –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞—á—É —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    app.job_queue.run_once(send_update_notification, 0)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –≤ 8:00
    app.job_queue.run_daily(send_daily_weather, time=datetime.time(hour=8, minute=0))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()
